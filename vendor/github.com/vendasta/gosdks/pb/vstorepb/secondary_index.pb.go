// Code generated by protoc-gen-go.
// source: secondary_index.proto
// DO NOT EDIT!

package vstorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SecondaryIndexPropertyConfig struct {
	// Types that are valid to be assigned to Config:
	//	*SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig
	//	*SecondaryIndexPropertyConfig_CloudsqlPropertyConfig
	Config isSecondaryIndexPropertyConfig_Config `protobuf_oneof:"config"`
}

func (m *SecondaryIndexPropertyConfig) Reset()                    { *m = SecondaryIndexPropertyConfig{} }
func (m *SecondaryIndexPropertyConfig) String() string            { return proto.CompactTextString(m) }
func (*SecondaryIndexPropertyConfig) ProtoMessage()               {}
func (*SecondaryIndexPropertyConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isSecondaryIndexPropertyConfig_Config interface {
	isSecondaryIndexPropertyConfig_Config()
}

type SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig struct {
	ElasticsearchPropertyConfig *SecondaryIndexPropertyConfig_Elasticsearch `protobuf:"bytes,1,opt,name=elasticsearch_property_config,json=elasticsearchPropertyConfig,oneof"`
}
type SecondaryIndexPropertyConfig_CloudsqlPropertyConfig struct {
	CloudsqlPropertyConfig *SecondaryIndexPropertyConfig_CloudSQL `protobuf:"bytes,2,opt,name=cloudsql_property_config,json=cloudsqlPropertyConfig,oneof"`
}

func (*SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig) isSecondaryIndexPropertyConfig_Config() {
}
func (*SecondaryIndexPropertyConfig_CloudsqlPropertyConfig) isSecondaryIndexPropertyConfig_Config() {}

func (m *SecondaryIndexPropertyConfig) GetConfig() isSecondaryIndexPropertyConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SecondaryIndexPropertyConfig) GetElasticsearchPropertyConfig() *SecondaryIndexPropertyConfig_Elasticsearch {
	if x, ok := m.GetConfig().(*SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig); ok {
		return x.ElasticsearchPropertyConfig
	}
	return nil
}

func (m *SecondaryIndexPropertyConfig) GetCloudsqlPropertyConfig() *SecondaryIndexPropertyConfig_CloudSQL {
	if x, ok := m.GetConfig().(*SecondaryIndexPropertyConfig_CloudsqlPropertyConfig); ok {
		return x.CloudsqlPropertyConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecondaryIndexPropertyConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecondaryIndexPropertyConfig_OneofMarshaler, _SecondaryIndexPropertyConfig_OneofUnmarshaler, _SecondaryIndexPropertyConfig_OneofSizer, []interface{}{
		(*SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig)(nil),
		(*SecondaryIndexPropertyConfig_CloudsqlPropertyConfig)(nil),
	}
}

func _SecondaryIndexPropertyConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecondaryIndexPropertyConfig)
	// config
	switch x := m.Config.(type) {
	case *SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ElasticsearchPropertyConfig); err != nil {
			return err
		}
	case *SecondaryIndexPropertyConfig_CloudsqlPropertyConfig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloudsqlPropertyConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecondaryIndexPropertyConfig.Config has unexpected type %T", x)
	}
	return nil
}

func _SecondaryIndexPropertyConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecondaryIndexPropertyConfig)
	switch tag {
	case 1: // config.elasticsearch_property_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecondaryIndexPropertyConfig_Elasticsearch)
		err := b.DecodeMessage(msg)
		m.Config = &SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig{msg}
		return true, err
	case 2: // config.cloudsql_property_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecondaryIndexPropertyConfig_CloudSQL)
		err := b.DecodeMessage(msg)
		m.Config = &SecondaryIndexPropertyConfig_CloudsqlPropertyConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SecondaryIndexPropertyConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecondaryIndexPropertyConfig)
	// config
	switch x := m.Config.(type) {
	case *SecondaryIndexPropertyConfig_ElasticsearchPropertyConfig:
		s := proto.Size(x.ElasticsearchPropertyConfig)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecondaryIndexPropertyConfig_CloudsqlPropertyConfig:
		s := proto.Size(x.CloudsqlPropertyConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SecondaryIndexPropertyConfig_ElasticsearchField struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Index string `protobuf:"bytes,3,opt,name=index" json:"index,omitempty"`
}

func (m *SecondaryIndexPropertyConfig_ElasticsearchField) Reset() {
	*m = SecondaryIndexPropertyConfig_ElasticsearchField{}
}
func (m *SecondaryIndexPropertyConfig_ElasticsearchField) String() string {
	return proto.CompactTextString(m)
}
func (*SecondaryIndexPropertyConfig_ElasticsearchField) ProtoMessage() {}
func (*SecondaryIndexPropertyConfig_ElasticsearchField) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

func (m *SecondaryIndexPropertyConfig_ElasticsearchField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecondaryIndexPropertyConfig_ElasticsearchField) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SecondaryIndexPropertyConfig_ElasticsearchField) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// Elasticsearch Property Config
type SecondaryIndexPropertyConfig_Elasticsearch struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Index string `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
	// Allows fields to be stored multiple times with different analyzers
	Fields []*SecondaryIndexPropertyConfig_ElasticsearchField `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
}

func (m *SecondaryIndexPropertyConfig_Elasticsearch) Reset() {
	*m = SecondaryIndexPropertyConfig_Elasticsearch{}
}
func (m *SecondaryIndexPropertyConfig_Elasticsearch) String() string {
	return proto.CompactTextString(m)
}
func (*SecondaryIndexPropertyConfig_Elasticsearch) ProtoMessage() {}
func (*SecondaryIndexPropertyConfig_Elasticsearch) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 1}
}

func (m *SecondaryIndexPropertyConfig_Elasticsearch) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SecondaryIndexPropertyConfig_Elasticsearch) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SecondaryIndexPropertyConfig_Elasticsearch) GetFields() []*SecondaryIndexPropertyConfig_ElasticsearchField {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SecondaryIndexPropertyConfig_CloudSQL struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *SecondaryIndexPropertyConfig_CloudSQL) Reset()         { *m = SecondaryIndexPropertyConfig_CloudSQL{} }
func (m *SecondaryIndexPropertyConfig_CloudSQL) String() string { return proto.CompactTextString(m) }
func (*SecondaryIndexPropertyConfig_CloudSQL) ProtoMessage()    {}
func (*SecondaryIndexPropertyConfig_CloudSQL) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 2}
}

func (m *SecondaryIndexPropertyConfig_CloudSQL) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SecondaryIndex struct {
	// Name of the secondary index, this name must be unique from other secondary indexes
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Index configuration and denotes the type of the secondary index as well.
	//
	// Types that are valid to be assigned to Index:
	//	*SecondaryIndex_EsRawConfig
	//	*SecondaryIndex_EsConfig
	//	*SecondaryIndex_CloudSqlConfig
	Index isSecondaryIndex_Index `protobuf_oneof:"index"`
}

func (m *SecondaryIndex) Reset()                    { *m = SecondaryIndex{} }
func (m *SecondaryIndex) String() string            { return proto.CompactTextString(m) }
func (*SecondaryIndex) ProtoMessage()               {}
func (*SecondaryIndex) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type isSecondaryIndex_Index interface {
	isSecondaryIndex_Index()
}

type SecondaryIndex_EsRawConfig struct {
	EsRawConfig *ElasticsearchRawConfig `protobuf:"bytes,2,opt,name=es_raw_config,json=esRawConfig,oneof"`
}
type SecondaryIndex_EsConfig struct {
	EsConfig *ElasticsearchConfig `protobuf:"bytes,3,opt,name=es_config,json=esConfig,oneof"`
}
type SecondaryIndex_CloudSqlConfig struct {
	CloudSqlConfig *CloudSQLConfig `protobuf:"bytes,4,opt,name=cloud_sql_config,json=cloudSqlConfig,oneof"`
}

func (*SecondaryIndex_EsRawConfig) isSecondaryIndex_Index()    {}
func (*SecondaryIndex_EsConfig) isSecondaryIndex_Index()       {}
func (*SecondaryIndex_CloudSqlConfig) isSecondaryIndex_Index() {}

func (m *SecondaryIndex) GetIndex() isSecondaryIndex_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *SecondaryIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecondaryIndex) GetEsRawConfig() *ElasticsearchRawConfig {
	if x, ok := m.GetIndex().(*SecondaryIndex_EsRawConfig); ok {
		return x.EsRawConfig
	}
	return nil
}

func (m *SecondaryIndex) GetEsConfig() *ElasticsearchConfig {
	if x, ok := m.GetIndex().(*SecondaryIndex_EsConfig); ok {
		return x.EsConfig
	}
	return nil
}

func (m *SecondaryIndex) GetCloudSqlConfig() *CloudSQLConfig {
	if x, ok := m.GetIndex().(*SecondaryIndex_CloudSqlConfig); ok {
		return x.CloudSqlConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecondaryIndex) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecondaryIndex_OneofMarshaler, _SecondaryIndex_OneofUnmarshaler, _SecondaryIndex_OneofSizer, []interface{}{
		(*SecondaryIndex_EsRawConfig)(nil),
		(*SecondaryIndex_EsConfig)(nil),
		(*SecondaryIndex_CloudSqlConfig)(nil),
	}
}

func _SecondaryIndex_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecondaryIndex)
	// index
	switch x := m.Index.(type) {
	case *SecondaryIndex_EsRawConfig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EsRawConfig); err != nil {
			return err
		}
	case *SecondaryIndex_EsConfig:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EsConfig); err != nil {
			return err
		}
	case *SecondaryIndex_CloudSqlConfig:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloudSqlConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecondaryIndex.Index has unexpected type %T", x)
	}
	return nil
}

func _SecondaryIndex_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecondaryIndex)
	switch tag {
	case 2: // index.es_raw_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ElasticsearchRawConfig)
		err := b.DecodeMessage(msg)
		m.Index = &SecondaryIndex_EsRawConfig{msg}
		return true, err
	case 3: // index.es_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ElasticsearchConfig)
		err := b.DecodeMessage(msg)
		m.Index = &SecondaryIndex_EsConfig{msg}
		return true, err
	case 4: // index.cloud_sql_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloudSQLConfig)
		err := b.DecodeMessage(msg)
		m.Index = &SecondaryIndex_CloudSqlConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SecondaryIndex_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecondaryIndex)
	// index
	switch x := m.Index.(type) {
	case *SecondaryIndex_EsRawConfig:
		s := proto.Size(x.EsRawConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecondaryIndex_EsConfig:
		s := proto.Size(x.EsConfig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecondaryIndex_CloudSqlConfig:
		s := proto.Size(x.CloudSqlConfig)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ElasticsearchRawConfig struct {
	MappingJson  string `protobuf:"bytes,1,opt,name=mapping_json,json=mappingJson" json:"mapping_json,omitempty"`
	SettingsJson string `protobuf:"bytes,2,opt,name=settings_json,json=settingsJson" json:"settings_json,omitempty"`
	IndexName    string `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *ElasticsearchRawConfig) Reset()                    { *m = ElasticsearchRawConfig{} }
func (m *ElasticsearchRawConfig) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchRawConfig) ProtoMessage()               {}
func (*ElasticsearchRawConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *ElasticsearchRawConfig) GetMappingJson() string {
	if m != nil {
		return m.MappingJson
	}
	return ""
}

func (m *ElasticsearchRawConfig) GetSettingsJson() string {
	if m != nil {
		return m.SettingsJson
	}
	return ""
}

func (m *ElasticsearchRawConfig) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

type ElasticsearchConfig struct {
	NumberOfShards   int64                  `protobuf:"varint,1,opt,name=number_of_shards,json=numberOfShards" json:"number_of_shards,omitempty"`
	NumberOfReplicas int64                  `protobuf:"varint,2,opt,name=number_of_replicas,json=numberOfReplicas" json:"number_of_replicas,omitempty"`
	RefreshInterval  string                 `protobuf:"bytes,3,opt,name=refresh_interval,json=refreshInterval" json:"refresh_interval,omitempty"`
	Analysis         *ElasticsearchAnalysis `protobuf:"bytes,4,opt,name=analysis" json:"analysis,omitempty"`
	IndexName        string                 `protobuf:"bytes,5,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *ElasticsearchConfig) Reset()                    { *m = ElasticsearchConfig{} }
func (m *ElasticsearchConfig) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchConfig) ProtoMessage()               {}
func (*ElasticsearchConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ElasticsearchConfig) GetNumberOfShards() int64 {
	if m != nil {
		return m.NumberOfShards
	}
	return 0
}

func (m *ElasticsearchConfig) GetNumberOfReplicas() int64 {
	if m != nil {
		return m.NumberOfReplicas
	}
	return 0
}

func (m *ElasticsearchConfig) GetRefreshInterval() string {
	if m != nil {
		return m.RefreshInterval
	}
	return ""
}

func (m *ElasticsearchConfig) GetAnalysis() *ElasticsearchAnalysis {
	if m != nil {
		return m.Analysis
	}
	return nil
}

func (m *ElasticsearchConfig) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

type CloudSQLConfig struct {
	IndexName                  string `protobuf:"bytes,1,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
	InstanceIp                 string `protobuf:"bytes,2,opt,name=instance_ip,json=instanceIp" json:"instance_ip,omitempty"`
	UserName                   string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password                   string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	ClientKey                  []byte `protobuf:"bytes,5,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ClientCert                 []byte `protobuf:"bytes,6,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ServerCertificateAuthority []byte `protobuf:"bytes,7,opt,name=server_certificate_authority,json=serverCertificateAuthority,proto3" json:"server_certificate_authority,omitempty"`
	ProjectId                  string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	InstanceName               string `protobuf:"bytes,9,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *CloudSQLConfig) Reset()                    { *m = CloudSQLConfig{} }
func (m *CloudSQLConfig) String() string            { return proto.CompactTextString(m) }
func (*CloudSQLConfig) ProtoMessage()               {}
func (*CloudSQLConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *CloudSQLConfig) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *CloudSQLConfig) GetInstanceIp() string {
	if m != nil {
		return m.InstanceIp
	}
	return ""
}

func (m *CloudSQLConfig) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CloudSQLConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CloudSQLConfig) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *CloudSQLConfig) GetClientCert() []byte {
	if m != nil {
		return m.ClientCert
	}
	return nil
}

func (m *CloudSQLConfig) GetServerCertificateAuthority() []byte {
	if m != nil {
		return m.ServerCertificateAuthority
	}
	return nil
}

func (m *CloudSQLConfig) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CloudSQLConfig) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

// https://www.elastic.co/guide/en/elasticsearch/guide/current/custom-analyzers.html
type ElasticsearchAnalysis struct {
	Analyzers   []*ElasticsearchAnalyzer   `protobuf:"bytes,1,rep,name=analyzers" json:"analyzers,omitempty"`
	Filters     []*ElasticsearchFilter     `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
	CharFilters []*ElasticsearchCharFilter `protobuf:"bytes,3,rep,name=char_filters,json=charFilters" json:"char_filters,omitempty"`
	Tokenizers  []*ElasticsearchTokenizer  `protobuf:"bytes,4,rep,name=tokenizers" json:"tokenizers,omitempty"`
}

func (m *ElasticsearchAnalysis) Reset()                    { *m = ElasticsearchAnalysis{} }
func (m *ElasticsearchAnalysis) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchAnalysis) ProtoMessage()               {}
func (*ElasticsearchAnalysis) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ElasticsearchAnalysis) GetAnalyzers() []*ElasticsearchAnalyzer {
	if m != nil {
		return m.Analyzers
	}
	return nil
}

func (m *ElasticsearchAnalysis) GetFilters() []*ElasticsearchFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ElasticsearchAnalysis) GetCharFilters() []*ElasticsearchCharFilter {
	if m != nil {
		return m.CharFilters
	}
	return nil
}

func (m *ElasticsearchAnalysis) GetTokenizers() []*ElasticsearchTokenizer {
	if m != nil {
		return m.Tokenizers
	}
	return nil
}

// ElasticsearchAnalyzer configures a custom analyzer that can be built to transform your data into a
// configuration that suites your particular needs.
type ElasticsearchAnalyzer struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	StemExclusion []string `protobuf:"bytes,3,rep,name=stem_exclusion,json=stemExclusion" json:"stem_exclusion,omitempty"`
	StopWords     []string `protobuf:"bytes,4,rep,name=stop_words,json=stopWords" json:"stop_words,omitempty"`
	CharFilter    []string `protobuf:"bytes,5,rep,name=char_filter,json=charFilter" json:"char_filter,omitempty"`
	Tokenizer     string   `protobuf:"bytes,6,opt,name=tokenizer" json:"tokenizer,omitempty"`
	Filter        []string `protobuf:"bytes,7,rep,name=filter" json:"filter,omitempty"`
}

func (m *ElasticsearchAnalyzer) Reset()                    { *m = ElasticsearchAnalyzer{} }
func (m *ElasticsearchAnalyzer) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchAnalyzer) ProtoMessage()               {}
func (*ElasticsearchAnalyzer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *ElasticsearchAnalyzer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ElasticsearchAnalyzer) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ElasticsearchAnalyzer) GetStemExclusion() []string {
	if m != nil {
		return m.StemExclusion
	}
	return nil
}

func (m *ElasticsearchAnalyzer) GetStopWords() []string {
	if m != nil {
		return m.StopWords
	}
	return nil
}

func (m *ElasticsearchAnalyzer) GetCharFilter() []string {
	if m != nil {
		return m.CharFilter
	}
	return nil
}

func (m *ElasticsearchAnalyzer) GetTokenizer() string {
	if m != nil {
		return m.Tokenizer
	}
	return ""
}

func (m *ElasticsearchAnalyzer) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Token filters may change, add, or remove tokens.
type ElasticsearchFilter struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type        string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Pattern     string   `protobuf:"bytes,3,opt,name=pattern" json:"pattern,omitempty"`
	Replacement string   `protobuf:"bytes,4,opt,name=replacement" json:"replacement,omitempty"`
	Synonyms    []string `protobuf:"bytes,5,rep,name=synonyms" json:"synonyms,omitempty"`
}

func (m *ElasticsearchFilter) Reset()                    { *m = ElasticsearchFilter{} }
func (m *ElasticsearchFilter) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchFilter) ProtoMessage()               {}
func (*ElasticsearchFilter) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *ElasticsearchFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ElasticsearchFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ElasticsearchFilter) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *ElasticsearchFilter) GetReplacement() string {
	if m != nil {
		return m.Replacement
	}
	return ""
}

func (m *ElasticsearchFilter) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

// Character filters are used to “tidy up” a string before it is tokenized.
type ElasticsearchCharFilter struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Pattern     string `protobuf:"bytes,3,opt,name=pattern" json:"pattern,omitempty"`
	Replacement string `protobuf:"bytes,4,opt,name=replacement" json:"replacement,omitempty"`
}

func (m *ElasticsearchCharFilter) Reset()                    { *m = ElasticsearchCharFilter{} }
func (m *ElasticsearchCharFilter) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchCharFilter) ProtoMessage()               {}
func (*ElasticsearchCharFilter) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *ElasticsearchCharFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ElasticsearchCharFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ElasticsearchCharFilter) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *ElasticsearchCharFilter) GetReplacement() string {
	if m != nil {
		return m.Replacement
	}
	return ""
}

// The tokenizer breaks up the string into individual terms or tokens.
type ElasticsearchTokenizer struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Delimiter string `protobuf:"bytes,3,opt,name=delimiter" json:"delimiter,omitempty"`
	Pattern   string `protobuf:"bytes,4,opt,name=pattern" json:"pattern,omitempty"`
}

func (m *ElasticsearchTokenizer) Reset()                    { *m = ElasticsearchTokenizer{} }
func (m *ElasticsearchTokenizer) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchTokenizer) ProtoMessage()               {}
func (*ElasticsearchTokenizer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *ElasticsearchTokenizer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ElasticsearchTokenizer) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ElasticsearchTokenizer) GetDelimiter() string {
	if m != nil {
		return m.Delimiter
	}
	return ""
}

func (m *ElasticsearchTokenizer) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func init() {
	proto.RegisterType((*SecondaryIndexPropertyConfig)(nil), "vstorepb.SecondaryIndexPropertyConfig")
	proto.RegisterType((*SecondaryIndexPropertyConfig_ElasticsearchField)(nil), "vstorepb.SecondaryIndexPropertyConfig.ElasticsearchField")
	proto.RegisterType((*SecondaryIndexPropertyConfig_Elasticsearch)(nil), "vstorepb.SecondaryIndexPropertyConfig.Elasticsearch")
	proto.RegisterType((*SecondaryIndexPropertyConfig_CloudSQL)(nil), "vstorepb.SecondaryIndexPropertyConfig.CloudSQL")
	proto.RegisterType((*SecondaryIndex)(nil), "vstorepb.SecondaryIndex")
	proto.RegisterType((*ElasticsearchRawConfig)(nil), "vstorepb.ElasticsearchRawConfig")
	proto.RegisterType((*ElasticsearchConfig)(nil), "vstorepb.ElasticsearchConfig")
	proto.RegisterType((*CloudSQLConfig)(nil), "vstorepb.CloudSQLConfig")
	proto.RegisterType((*ElasticsearchAnalysis)(nil), "vstorepb.ElasticsearchAnalysis")
	proto.RegisterType((*ElasticsearchAnalyzer)(nil), "vstorepb.ElasticsearchAnalyzer")
	proto.RegisterType((*ElasticsearchFilter)(nil), "vstorepb.ElasticsearchFilter")
	proto.RegisterType((*ElasticsearchCharFilter)(nil), "vstorepb.ElasticsearchCharFilter")
	proto.RegisterType((*ElasticsearchTokenizer)(nil), "vstorepb.ElasticsearchTokenizer")
}

func init() { proto.RegisterFile("secondary_index.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0x7f, 0x12, 0x7b, 0x8f, 0x13, 0x13, 0x0d, 0x34, 0xac, 0xdc, 0x84, 0xa6, 0x46, 0x48,
	0x41, 0x42, 0x41, 0x2a, 0x48, 0x08, 0x01, 0x52, 0xdb, 0xb4, 0x51, 0x02, 0x08, 0xe8, 0x04, 0x89,
	0xcb, 0xd5, 0x64, 0x7d, 0x1c, 0x4f, 0xb3, 0x9e, 0xdd, 0xce, 0x8c, 0x93, 0x38, 0x12, 0xe2, 0x05,
	0xb8, 0x04, 0xf1, 0x58, 0xbc, 0x00, 0x8f, 0xc1, 0x0d, 0x77, 0x68, 0xce, 0xce, 0xae, 0xbd, 0xc6,
	0x86, 0x88, 0x8b, 0xde, 0x79, 0xbe, 0x3d, 0xdf, 0x77, 0xbe, 0xf3, 0x33, 0x93, 0xc0, 0x3d, 0x83,
	0x71, 0xaa, 0x06, 0x42, 0x4f, 0x23, 0xa9, 0x06, 0x78, 0x73, 0x98, 0xe9, 0xd4, 0xa6, 0xac, 0x7d,
	0x65, 0x6c, 0xaa, 0x31, 0x3b, 0xef, 0xff, 0xd2, 0x84, 0xdd, 0xb3, 0x22, 0xe6, 0xd4, 0x85, 0x7c,
	0xa7, 0xd3, 0x0c, 0xb5, 0x9d, 0x1e, 0xa5, 0x6a, 0x28, 0x2f, 0xd8, 0x2d, 0xec, 0x61, 0x22, 0x8c,
	0x95, 0xb1, 0x41, 0xa1, 0xe3, 0x51, 0x94, 0xf9, 0xef, 0x51, 0x4c, 0x01, 0x61, 0x6d, 0xbf, 0x76,
	0xd0, 0x79, 0xf4, 0xf1, 0x61, 0x21, 0x79, 0xf8, 0x6f, 0x72, 0x87, 0xcf, 0xe7, 0xb5, 0x4e, 0xd6,
	0xf8, 0xfd, 0x8a, 0xf8, 0x42, 0xee, 0x4b, 0x08, 0xe3, 0x24, 0x9d, 0x0c, 0xcc, 0xab, 0xe4, 0x1f,
	0x69, 0xeb, 0x94, 0xf6, 0xc3, 0x3b, 0xa6, 0x3d, 0x72, 0x32, 0x67, 0x2f, 0xbe, 0x3e, 0x59, 0xe3,
	0x3b, 0x85, 0x64, 0x35, 0xa4, 0xc7, 0x81, 0x55, 0xcc, 0x1d, 0x4b, 0x4c, 0x06, 0x8c, 0x41, 0x53,
	0x89, 0x31, 0x52, 0x95, 0x01, 0xa7, 0xdf, 0x0e, 0xb3, 0xd3, 0x0c, 0xc9, 0x42, 0xc0, 0xe9, 0x37,
	0x7b, 0x0b, 0xd6, 0xa9, 0xc1, 0x61, 0x83, 0xc0, 0xfc, 0xd0, 0xfb, 0xb9, 0x06, 0x5b, 0x15, 0xd1,
	0x92, 0x5b, 0x5b, 0xc6, 0xad, 0xcf, 0x71, 0xd9, 0x0b, 0xd8, 0x18, 0x3a, 0x0b, 0x26, 0x6c, 0xec,
	0x37, 0x0e, 0x3a, 0x8f, 0x3e, 0xfd, 0x3f, 0x1d, 0xa6, 0x22, 0xb8, 0x17, 0xea, 0xbd, 0x03, 0xed,
	0xa2, 0x11, 0xcb, 0x8c, 0x3c, 0x6d, 0xc3, 0x46, 0xde, 0xdd, 0xfe, 0x5f, 0x35, 0xe8, 0x56, 0xb3,
	0x2c, 0xed, 0xc4, 0x31, 0x6c, 0xa1, 0x89, 0xb4, 0xb8, 0xae, 0x4e, 0x65, 0x7f, 0x66, 0xb5, 0xe2,
	0x86, 0x8b, 0xeb, 0xdc, 0xe4, 0xc9, 0x1a, 0xef, 0xa0, 0x29, 0x8f, 0xec, 0x73, 0x08, 0xd0, 0x14,
	0x1a, 0x0d, 0xd2, 0xd8, 0x5b, 0xa1, 0x51, 0x0a, 0xb4, 0xd1, 0x78, 0xf6, 0x33, 0xd8, 0xa6, 0x99,
	0x46, 0x6e, 0x4f, 0xbc, 0x48, 0x93, 0x44, 0xc2, 0x99, 0x48, 0x51, 0x78, 0xc9, 0xef, 0x12, 0xe7,
	0xec, 0x55, 0x92, 0x23, 0x4f, 0x5b, 0x7e, 0x0a, 0xfd, 0x9f, 0x60, 0x67, 0xb9, 0x6b, 0xf6, 0x10,
	0x36, 0xc7, 0x22, 0xcb, 0xa4, 0xba, 0x88, 0x5e, 0x9a, 0x54, 0xf9, 0x56, 0x74, 0x3c, 0xf6, 0xa5,
	0x49, 0x15, 0x7b, 0x17, 0xb6, 0x0c, 0x5a, 0x2b, 0xd5, 0x85, 0xc9, 0x63, 0xf2, 0x99, 0x6e, 0x16,
	0x20, 0x05, 0xed, 0x01, 0x50, 0xaa, 0x88, 0x1a, 0x9a, 0x6f, 0x4c, 0x40, 0xc8, 0x37, 0x62, 0x8c,
	0xfd, 0x3f, 0x6b, 0xf0, 0xe6, 0x92, 0x9a, 0xd9, 0x01, 0x6c, 0xab, 0xc9, 0xf8, 0x1c, 0x75, 0x94,
	0x0e, 0x23, 0x33, 0x12, 0x7a, 0x60, 0xc8, 0x42, 0x83, 0x77, 0x73, 0xfc, 0xdb, 0xe1, 0x19, 0xa1,
	0xec, 0x03, 0x60, 0xb3, 0x48, 0x8d, 0x59, 0x22, 0x63, 0x61, 0xc8, 0x4a, 0x83, 0x6f, 0x17, 0xb1,
	0xdc, 0xe3, 0xec, 0x7d, 0xd8, 0xd6, 0x38, 0xd4, 0x68, 0x46, 0x91, 0x54, 0x16, 0xf5, 0x95, 0x48,
	0xbc, 0xa9, 0x37, 0x3c, 0x7e, 0xea, 0x61, 0xf6, 0x19, 0xb4, 0x85, 0x12, 0xc9, 0xd4, 0x48, 0xe3,
	0x5b, 0xfc, 0x60, 0xc5, 0x9c, 0x9e, 0xf8, 0x30, 0x5e, 0x12, 0x16, 0xca, 0x5e, 0x5f, 0x2c, 0xfb,
	0xf7, 0x3a, 0x74, 0xab, 0x53, 0x5a, 0x60, 0xd4, 0x16, 0x18, 0xec, 0x01, 0x74, 0xa4, 0x32, 0x56,
	0xa8, 0x18, 0x23, 0x99, 0xf9, 0x56, 0x43, 0x01, 0x9d, 0x66, 0xec, 0x3e, 0x04, 0x13, 0x83, 0x7a,
	0xbe, 0xcf, 0x6d, 0x07, 0x10, 0xbb, 0x07, 0xed, 0x4c, 0x18, 0x73, 0x9d, 0xea, 0x01, 0xd5, 0x12,
	0xf0, 0xf2, 0xec, 0x12, 0xc7, 0x89, 0x44, 0x65, 0xa3, 0x4b, 0x9c, 0x92, 0xd5, 0x4d, 0x1e, 0xe4,
	0xc8, 0x57, 0x38, 0x75, 0x89, 0xfd, 0xe7, 0x18, 0xb5, 0x0d, 0x37, 0xe8, 0xbb, 0x67, 0x1c, 0xa1,
	0xb6, 0xec, 0x31, 0xec, 0x1a, 0xd4, 0x57, 0xa8, 0x29, 0x40, 0x0e, 0x65, 0x2c, 0x2c, 0x46, 0x62,
	0x62, 0x47, 0xa9, 0x96, 0x76, 0x1a, 0xb6, 0x88, 0xd1, 0xcb, 0x63, 0x8e, 0x66, 0x21, 0x4f, 0x8a,
	0x08, 0xe7, 0x20, 0xd3, 0xe9, 0x4b, 0x8c, 0x6d, 0x24, 0x07, 0x61, 0x3b, 0x2f, 0xdd, 0x23, 0xa7,
	0x03, 0xb7, 0x67, 0x65, 0xe9, 0x54, 0x5d, 0x90, 0xef, 0x59, 0x01, 0x52, 0x47, 0x7f, 0xab, 0xc3,
	0xbd, 0xa5, 0x43, 0x61, 0x5f, 0x40, 0x40, 0x63, 0xb9, 0x45, 0xed, 0x76, 0xa8, 0xf1, 0x5f, 0x83,
	0xbc, 0x45, 0xcd, 0x67, 0x0c, 0xf6, 0x09, 0xb4, 0x86, 0x32, 0xb1, 0x8e, 0x5c, 0x27, 0xf2, 0xaa,
	0xdb, 0x7a, 0x4c, 0x51, 0xbc, 0x88, 0x66, 0xcf, 0x60, 0x33, 0x1e, 0x09, 0x1d, 0x15, 0xec, 0xfc,
	0x69, 0x7b, 0xb8, 0xea, 0xae, 0x8f, 0x84, 0xf6, 0x0a, 0x9d, 0xb8, 0xfc, 0x6d, 0xd8, 0x63, 0x00,
	0x9b, 0x5e, 0xa2, 0x92, 0x64, 0xbf, 0x49, 0x1a, 0xab, 0xde, 0x9c, 0xef, 0x8b, 0x40, 0x3e, 0xc7,
	0xe9, 0xff, 0x51, 0x5b, 0xd6, 0x99, 0x5b, 0xd4, 0x77, 0x7e, 0xf0, 0xdf, 0x83, 0xae, 0xb1, 0x38,
	0x8e, 0xf0, 0x26, 0x4e, 0x26, 0x46, 0xa6, 0x8a, 0x6a, 0x09, 0xf8, 0x96, 0x43, 0x9f, 0x17, 0xa0,
	0x1b, 0xa3, 0xb1, 0x69, 0x16, 0xb9, 0xad, 0xca, 0xad, 0x06, 0x3c, 0x70, 0xc8, 0x0f, 0x0e, 0xa0,
	0x45, 0x9a, 0xf5, 0x23, 0x5c, 0xa7, 0xef, 0x30, 0xab, 0x95, 0xed, 0x42, 0x50, 0xda, 0xa6, 0x3d,
	0x0b, 0xf8, 0x0c, 0x60, 0x3b, 0xee, 0x6f, 0x04, 0x31, 0x5b, 0xc4, 0xf4, 0xa7, 0xfe, 0xaf, 0x8b,
	0x2f, 0x88, 0x57, 0xbb, 0x6b, 0x71, 0x21, 0xb4, 0x32, 0x61, 0x2d, 0x6a, 0xe5, 0x6f, 0x4d, 0x71,
	0x64, 0xfb, 0xd0, 0x71, 0xef, 0x89, 0x88, 0x71, 0x8c, 0xca, 0xfa, 0x7b, 0x33, 0x0f, 0xb9, 0x6b,
	0x65, 0xa6, 0x2a, 0x55, 0xd3, 0xb1, 0xf1, 0xf5, 0x94, 0xe7, 0xfe, 0x8f, 0xf0, 0xf6, 0x8a, 0x01,
	0xbf, 0x0e, 0x6b, 0xfd, 0x9b, 0x85, 0x97, 0xbd, 0xdc, 0x8d, 0x3b, 0x67, 0xdf, 0x85, 0x60, 0x80,
	0x89, 0x1c, 0x4b, 0xd7, 0x73, 0xff, 0x70, 0x97, 0xc0, 0xbc, 0xb7, 0x66, 0xc5, 0xdb, 0xf9, 0x06,
	0xfd, 0xdf, 0xf5, 0xd1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x55, 0xd8, 0xb4, 0xc4, 0x90, 0x09,
	0x00, 0x00,
}
